#include "kart.h"
//-----------------------------------------------------------------------------------------------------------------

//fonction
void __interrupt() ISR(void); //interuption pour le CAN
void init_timer(void); //init du timer2 pour la pwm
void initPWM(void); //init de la PWM
void initADC(void); //config entre Analogique et du CAN
void init_interup(void); //autorise l'interruption sur le CAN
void lecturAn(char port);//lit le Port analogique du CAN(avoir config la broche ds initADC(void))
//-----------------------------------------------------------------------------------------------------------------



//-----------------------------------------------------------------------------------------------------------------
void main (void)
{
//-----------------------------------------------------------------------------------------------------------------
    //appel des differentes configurations 
    init_interup();
    InitPic();
    init_timer();
    initPWM();
    initADC();
    
 //-----------------------------------------------------------------------------------------------------------------
    
    
    
    while(1)
    {
        lecturAn(3);//lecture sur le port Analogique3 = RA3;2=RA2;1=RA1;4=RA5,Le port 5,6et 7 n'existe pas, le rest sur PORTB et PORTC;19=RC7
    }
//-----------------------------------------------------------------------------------------------------------------
}
//-----------------------------------------------------------------------------------------------------------------
void __interrupt() ISR(void)
{
    if (PIR1bits.ADIF) // Vérifiez si l'interruption du CAN a été déclenchée
    {
                              //char dutycycle;
    char valccp1;
    
        valccp1 = ADRESH/2.55;//dutycycle = ADRESH/2.55;
                              //valccp1 = dutycycle;
        CCPR1L = valccp1;
        
        PIR1bits.ADIF = 0;  //Réinitialisez le drapeau d'interruption du CAN
    }
}

//-----------------------------------------------------------------------------------------------------------------

void init_timer(void)
{
    OSCCON=0x72;//freq OSC a 16MHz
    PR2=100;// FREQ timer2 a 40KHz
    T2CON=0b00000100;//Prediviseur à 1
    TMR2=0;
}

//-----------------------------------------------------------------------------------------------------------------

void initPWM(void)
{
   
    CCP1CON=0x0C; //configuration ccp1 en PWM sortie sur RC2  
    CCPR1L = 40;// configuration du rapport cyclique
    CCPTMRS0=0x00;//met le timer 2 sur la PWM
    TRISCbits.RC2=0; //config en sortie pour la PWM
}

//-----------------------------------------------------------------------------------------------------------------

void initADC(void)
{
	// Configurer PORT A comme entrée analogique
	ANSELA = 0xFF;
    TRISA = 0xFF;
	// Configuration du module CAN
	ADCON0 = 0b00000101; // Active le CAN et sélectionne AN0 comme entrée
	ADCON1 = 0b00000000; // Tension de référence VDD et VSS
	ADCON2 = 0b00010010; // Fréquence d'horloge ADC configurée
}

//-----------------------------------------------------------------------------------------------------------------

void init_interup(void)
{
    INTCONbits.GIE = 1;  // Activation globale des interruptions
    INTCONbits.PEIE = 1; // Activation des interruptions périphériques
    PIE1bits.ADIE = 1; // Activation de l'interruption du CAN
    ADCON0bits.GO = 0; // Démarre la conversion

}

//-----------------------------------------------------------------------------------------------------------------

void lecturAn(char port)
{
    ADCON0bits.CHS = port;//config le port choisi a convertir
    ADCON0bits.GO = 1;//lance la conversion
}